<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio 11.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="11.0">
 <Namespaces>
  <Namespace Name="AxsUtils">
   <Messages>
    <Message Id="Axs" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Axs' in namespace name 'AxsUtils'.</Issue>
    </Message>
    <Message Id="Utils" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Utils' in namespace name 'AxsUtils'.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="AxsUtils.Http">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'AxsUtils.Http' with another namespace.</Issue>
    </Message>
    <Message Id="Axs" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Axs' in namespace name 'AxsUtils.Http'.</Issue>
    </Message>
    <Message Id="Utils" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Utils' in namespace name 'AxsUtils.Http'.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="AxsUtils.Win32">
   <Messages>
    <Message Id="Axs" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Axs' in namespace name 'AxsUtils.Win32'.</Issue>
    </Message>
    <Message Id="Utils" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Utils' in namespace name 'AxsUtils.Win32'.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="AxsUtils.Xml">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'AxsUtils.Xml' with another namespace.</Issue>
    </Message>
    <Message Id="Axs" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Axs' in namespace name 'AxsUtils.Xml'.</Issue>
    </Message>
    <Message Id="Utils" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Utils' in namespace name 'AxsUtils.Xml'.</Issue>
    </Message>
   </Messages>
  </Namespace>
 </Namespaces>
 <Targets>
  <Target Name="D:\Codice\VisualStudio2012\AxsUtils\AxsUtils.dll">
   <Modules>
    <Module Name="axsutils.dll">
     <Messages>
      <Message Id="Axs" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
       <Issue Name="Assembly" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Axs' in assembly name 'AxsUtils.dll'.</Issue>
      </Message>
      <Message Id="Utils" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
       <Issue Name="Assembly" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Utils' in assembly name 'AxsUtils.dll'.</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="AxsUtils">
       <Types>
        <Type Name="ArgumentsParser" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="ArgumentsParser.cs" Line="70">In externally visible method 'ArgumentsParser.ArgumentsParser(string[])', validate parameter 'args' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Item[System.String]" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="ArgumentsParser.cs" Line="143">In method 'ArgumentsParser.this[string]', correct the spelling of 'param' in parameter name 'param' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AxsException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Axs" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Axs' in type name 'AxsException'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="AxsUtils" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="AxsException.cs" Line="24">Correct the spelling of the unrecognized token 'AxsUtils' in the literal '"AxsUtils General Exception"'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ConverterBase" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ToInt(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="int" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="LanguageSpecificMember" Certainty="75" Level="Error">Consider replacing the language-specific data type identifier 'Int' in member name 'ConverterBase.ToInt(string)' with either a language-independent equivalent or a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Dates" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#DateToString(System.DateTime)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="dt" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="Dates.cs" Line="40">In method 'Dates.DateToString(DateTime)', correct the spelling of 'dt' in parameter name 'dt' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StringToDate(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Convert.ToDateTime(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils" File="Dates.cs" Line="55">Because the behavior of 'Convert.ToDateTime(string)' could vary based on the current user's locale settings, replace this call in 'Dates.StringToDate(string)' with a call to 'Convert.ToDateTime(string, IFormatProvider)'. If the result of 'Convert.ToDateTime(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DirectoryElements" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Files" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils" File="DirectoryElements.cs" Line="129">Change 'List&lt;FileInfo&gt;' in 'DirectoryElements.Files' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsWithSubDirs" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Dirs" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="DirectoryElements.cs" Line="107">Correct the spelling of 'Dirs' in member name 'DirectoryElements.IsWithSubDirs' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#NrOfFiles" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Nr" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils" File="DirectoryElements.cs" Line="153">Correct the casing of 'Nr' in member name 'DirectoryElements.NrOfFiles' by changing it to 'NR'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#NrOfSubdirectories" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Nr" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils" File="DirectoryElements.cs" Line="178">Correct the casing of 'Nr' in member name 'DirectoryElements.NrOfSubdirectories' by changing it to 'NR'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveElement(System.IO.FileInfo)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils" File="DirectoryElements.cs" Line="194">Consider changing the type of parameter 'fileToRemove' in 'DirectoryElements.RemoveElement(FileInfo)' from 'FileInfo' to its base type 'FileSystemInfo'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="DirectoryElements.cs" Line="201">In externally visible method 'DirectoryElements.RemoveElement(FileInfo)', validate parameter 'fileToRemove' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Scan(System.IO.DirectoryInfo,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Dirs" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="DirectoryElements.cs" Line="60">In method 'DirectoryElements.Scan(DirectoryInfo, bool)', correct the spelling of 'Dirs' in parameter name 'includeSubDirs' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Subdirectories" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils" File="DirectoryElements.cs" Line="142">Change 'List&lt;DirectoryInfo&gt;' in 'DirectoryElements.Subdirectories' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="FileManager" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#FileLines(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="FileManager.cs" Line="460">Method 'FileManager.FileLines(string)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "Cannot read ".</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FileSize(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="FileManager.cs" Line="417">The 'this' parameter (or 'Me' in Visual Basic) of 'FileManager.FileSize(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetPath(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.LastIndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils" File="FileManager.cs" Line="710">Because the behavior of 'string.LastIndexOf(string)' could vary based on the current user's locale settings, replace this call in 'FileManager.GetPath(string)' with a call to 'string.LastIndexOf(string, StringComparison)'. If the result of 'string.LastIndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsFilenameValid(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Filename" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeCompoundWord" Certainty="80" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils" File="FileManager.cs" Line="53">The discrete term 'Filename' in member name 'FileManager.IsFilenameValid(string)' should be expressed as a compound word, 'FileName'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadBinaryFile(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="FileManager.cs" Line="252">Object 'bs' can be disposed more than once in method 'FileManager.ReadBinaryFile(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 252</Issue>
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="FileManager.cs" Line="252">Object 'bufs' can be disposed more than once in method 'FileManager.ReadBinaryFile(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 252, 254</Issue>
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="FileManager.cs" Line="252">Object 'fs' can be disposed more than once in method 'FileManager.ReadBinaryFile(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 252, 254, 256</Issue>
            </Message>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="FileManager.cs" Line="247">Method 'FileManager.ReadBinaryFile(string)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "Cannot load ".</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadFile(System.String,System.Text.Encoding)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="FileManager.cs" Line="398">Method 'FileManager.ReadFile(string, Encoding)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "Cannot load ".</Issue>
            </Message>
            <Message Id="enc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="FileManager.cs" Line="382">In method 'FileManager.ReadFile(string, Encoding)', correct the spelling of 'enc' in parameter name 'enc' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadFileLines(System.String,System.Text.Encoding)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="FileManager.cs" Line="520">Method 'FileManager.ReadFileLines(string, Encoding)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "Cannot read ".</Issue>
            </Message>
            <Message Id="enc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="FileManager.cs" Line="493">In method 'FileManager.ReadFileLines(string, Encoding)', correct the spelling of 'enc' in parameter name 'enc' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadTextFile(System.String,System.Text.Encoding)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="FileManager.cs" Line="331">Method 'FileManager.ReadTextFile(string, Encoding)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "Cannot load ".</Issue>
            </Message>
            <Message Id="enc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="FileManager.cs" Line="300">In method 'FileManager.ReadTextFile(string, Encoding)', correct the spelling of 'enc' in parameter name 'enc' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RenameFile(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="newname" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="FileManager.cs" Line="348">In method 'FileManager.RenameFile(string, string)', correct the spelling of 'newname' in parameter name 'newname' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveFile(System.String,System.String,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="FileManager.cs" Line="605">In method 'FileManager.SaveFile(string, string, bool)', object 'fSave' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'fSave' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="SaveFile" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="FileManager.cs" Line="591">Correct the spelling of the unrecognized token 'SaveFile' in the literal '"Trying SaveFile with an empty filename"'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="HexEncoding" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetBytes(System.String,System.Int32&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="HexEncoding.cs" Line="61">Consider a design that does not require that 'discarded' be an out parameter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HexToByte(System.String)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Byte.Parse(System.String,System.Globalization.NumberStyles)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils" File="HexEncoding.cs" Line="174">Because the behavior of 'byte.Parse(string, NumberStyles)' could vary based on the current user's locale settings, replace this call in 'HexEncoding.HexToByte(string)' with a call to 'byte.Parse(string, NumberStyles, IFormatProvider)'. If the result of 'byte.Parse(string, NumberStyles, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsHexDigit(System.Char)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="HexEncoding.cs" Line="152">In method 'HexEncoding.IsHexDigit(char)', consider providing a more meaningful name than parameter name 'c'.</Issue>
            </Message>
            <Message Id="System.Char.ToUpper(System.Char)" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils" File="HexEncoding.cs" Line="156">Because the behavior of 'char.ToUpper(char)' could vary based on the current user's locale settings, replace this call in 'HexEncoding.IsHexDigit(char)' with a call to 'char.ToUpper(char, CultureInfo)'. If the result of 'char.ToUpper(char, CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsHexFormat(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="string" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils" File="HexEncoding.cs" Line="127">In member 'HexEncoding.IsHexFormat(string)', consider replacing the data type identifier 'String' in parameter name 'hexString' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToString(System.Byte[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Byte.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils" File="HexEncoding.cs" Line="116">Because the behavior of 'byte.ToString(string)' could vary based on the current user's locale settings, replace this call in 'HexEncoding.ToString(byte[])' with a call to 'byte.ToString(string, IFormatProvider)'. If the result of 'byte.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="HexEncoding.cs" Line="114">In externally visible method 'HexEncoding.ToString(byte[])', validate parameter 'message' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Logger" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AddEmptyLine()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="Logger.cs" Line="73">The 'this' parameter (or 'Me' in Visual Basic) of 'Logger.AddEmptyLine()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Log(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="Logger.cs" Line="60">The 'this' parameter (or 'Me' in Visual Basic) of 'Logger.Log(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="Logger.cs" Line="65">In externally visible method 'Logger.Log(string)', validate parameter 'message' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogError(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="Logger.cs" Line="82">The 'this' parameter (or 'Me' in Visual Basic) of 'Logger.LogError(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="Logger.cs" Line="87">In externally visible method 'Logger.LogError(string)', validate parameter 'message' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MetaBinary" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AddMetaBinary(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="MetaBinary.cs" Line="129">Object 'fsW' can be disposed more than once in method 'MetaBinary.AddMetaBinary(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 129</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeleteMetadata(System.String)" Kind="Method" Static="True" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Runtime.InteropServices.SafeHandle.DangerousGetHandle" TypeName="AvoidCallingProblematicMethods" Category="Microsoft.Reliability" CheckId="CA2001" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Name="System.Runtime.InteropServices.SafeHandle.DangerousGetHandle" Certainty="75" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils" File="MetaBinary.cs" Line="197">Remove the call to SafeHandle.DangerousGetHandle from 'MetaBinary.DeleteMetadata(string)'.</Issue>
            </Message>
            <Message Id="outfile" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="MetaBinary.cs" Line="192">In method 'MetaBinary.DeleteMetadata(string)', correct the spelling of 'outfile' in parameter name 'outfile' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Metadata" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Metadata()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="MetaBinary.cs" Line="88">Object 'fsR' can be disposed more than once in method 'MetaBinary.Metadata.get()'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 88</Issue>
              </Message>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="MetaBinary.cs" Line="104">'MetaBinary.Metadata.get()' creates an exception of type 'IOException', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
              <Message Id="BinMetadata" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="MetaBinary.cs" Line="104">Correct the spelling of the unrecognized token 'BinMetadata' in the literal '"BinMetadata file does not exist."'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#METADATA_SIZE" Kind="Field" Static="True" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="METADATA" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'METADATA' in member name 'MetaBinary.METADATA_SIZE' by changing it to 'Metadata'.</Issue>
            </Message>
            <Message Id="SIZE" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'SIZE' in member name 'MetaBinary.METADATA_SIZE' by changing it to 'Size'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'MetaBinary.METADATA_SIZE'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RestoreOriginal(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="outdir" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="MetaBinary.cs" Line="160">In method 'MetaBinary.RestoreOriginal(string, string)', correct the spelling of 'outdir' in parameter name 'outdir' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Test()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="MetaBinary.cs" Line="253">Method 'MetaBinary.Test()' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "Temp zip written".</Issue>
            </Message>
            <Message Id="System.Console.WriteLine(System.String,System.Object)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="MetaBinary.cs" Line="249">Method 'MetaBinary.Test()' passes a literal string as parameter 'format' of a call to 'Console.WriteLine(string, object)'. Retrieve the following string(s) from a resource table instead: "METADATA INSIDE: [{0}]".</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PositionalNotationConverter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ToInt(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils" File="PositionalNotationConverter.cs" Line="57">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'PositionalNotationConverter.ToInt(string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RandomString" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetEx()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberNewerVersion" Certainty="95" Level="CriticalError" Path="d:\Codice\VisualStudio2012\AxsUtils" File="RandomString.cs" Line="43">Either replace the suffix 'Ex' in member name 'RandomString.GetEx()' with the suggested numeric alternate '2' or provide a more meaningful suffix that distinguishes it from the member it replaces.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetEx(System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberNewerVersion" Certainty="95" Level="CriticalError" Path="d:\Codice\VisualStudio2012\AxsUtils" File="RandomString.cs" Line="88">Either replace the suffix 'Ex' in member name 'RandomString.GetEx(int)' with the suggested numeric alternate '2' or provide a more meaningful suffix that distinguishes it from the member it replaces.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetEx(System.Int32,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberNewerVersion" Certainty="95" Level="CriticalError" Path="d:\Codice\VisualStudio2012\AxsUtils" File="RandomString.cs" Line="166">Either replace the suffix 'Ex' in member name 'RandomString.GetEx(int, bool)' with the suggested numeric alternate '2' or provide a more meaningful suffix that distinguishes it from the member it replaces.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetEx(System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberNewerVersion" Certainty="95" Level="CriticalError" Path="d:\Codice\VisualStudio2012\AxsUtils" File="RandomString.cs" Line="76">Either replace the suffix 'Ex' in member name 'RandomString.GetEx(int, int)' with the suggested numeric alternate '2' or provide a more meaningful suffix that distinguishes it from the member it replaces.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsInAlpha(System.Char)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="RandomString.cs" Line="101">In method 'RandomString.IsInAlpha(char)', consider providing a more meaningful name than parameter name 'c'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsInAlphaEx(System.Char)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="RandomString.cs" Line="121">In method 'RandomString.IsInAlphaEx(char)', consider providing a more meaningful name than parameter name 'c'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberNewerVersion" Certainty="95" Level="CriticalError" Path="d:\Codice\VisualStudio2012\AxsUtils" File="RandomString.cs" Line="121">Either replace the suffix 'Ex' in member name 'RandomString.IsInAlphaEx(char)' with the suggested numeric alternate '2' or provide a more meaningful suffix that distinguishes it from the member it replaces.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RomanConverter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ToString(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Body" TypeName="PreferJaggedArraysOverMultidimensional" Category="Microsoft.Performance" CheckId="CA1814" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="Body" Certainty="25" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="RomanConverter.cs" Line="29">'RomanConverter.ToString(int)' uses a multidimensional array of 'string[,]'. Replace it with a jagged array if possible.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="StringCache" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Test()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String,System.Object)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="StringCache.cs" Line="87">Method 'StringCache.Test()' passes a literal string as parameter 'format' of a call to 'Console.WriteLine(string, object)'. Retrieve the following string(s) from a resource table instead: "Cannot find {0}: added".</Issue>
            </Message>
            <Message Id="System.Console.WriteLine(System.String,System.Object,System.Object)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="StringCache.cs" Line="92">Method 'StringCache.Test()' passes a literal string as parameter 'format' of a call to 'Console.WriteLine(string, object, object)'. Retrieve the following string(s) from a resource table instead: "Found {0}: {1}".</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UniChars" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Uni" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Uni' in type name 'UniChars'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#CharAt(System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Num" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils" File="UniChars.cs" Line="23">In method 'UniChars.CharAt(int)', correct the spelling of 'Num' in parameter name 'charNum' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="AxsUtils.Http">
       <Types>
        <Type Name="HttpAxsRequest" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Axs" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Axs' in type name 'HttpAxsRequest'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#MakeRequest(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Http" File="HttpAxsRequest.cs" Line="151">Method 'HttpAxsRequest.MakeRequest(string, string)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "Error: ".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Codice\VisualStudio2012\AxsUtils\Http" File="HttpAxsRequest.cs" Line="147">Modify 'HttpAxsRequest.MakeRequest(string, string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="0#" TypeName="UriParametersShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1054" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Certainty="60" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Http" File="HttpAxsRequest.cs" Line="117">Change the type of parameter 'url' of method 'HttpAxsRequest.MakeRequest(string, string)' from string to System.Uri, or provide an overload of 'HttpAxsRequest.MakeRequest(string, string)', that allows 'url' to be passed as a System.Uri object.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetProxy(System.String,System.String,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="username" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeCompoundWord" Certainty="80" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Http" File="HttpAxsRequest.cs" Line="86">In member 'HttpAxsRequest.SetProxy(string, string, string, string)', the discrete term 'username' in parameter name 'username' should be expressed as a compound word, 'userName'.</Issue>
            </Message>
            <Message Id="i" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils\Http" File="HttpAxsRequest.cs" Line="86">In method 'HttpAxsRequest.SetProxy(string, string, string, string)', correct the spelling of 'i' in parameter name 'iProxy' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="AxsUtils.Win32">
       <Types>
        <Type Name="ClipboardUtils" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Utils" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Utils' in type name 'ClipboardUtils'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#CanPaste()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="ClipboardUtils.cs" Line="60">Modify 'ClipboardUtils.CanPaste()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Copy(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="ClipboardUtils.cs" Line="38">Modify 'ClipboardUtils.Copy(string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Get()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="ClipboardUtils.cs" Line="84">Modify 'ClipboardUtils.Get()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DiskManagement" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetDiskSpace(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="DiskManagement.cs" Line="36">In method 'DiskManagement.GetDiskSpace(string)', call System.IDisposable.Dispose on object 'new ManagementObjectSearcher(new SelectQuery(sb.ToString()))' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="System.Convert.ToString(System.UInt64)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="DiskManagement.cs" Line="46">Because the behavior of 'Convert.ToString(ulong)' could vary based on the current user's locale settings, replace this call in 'DiskManagement.GetDiskSpace(string)' with a call to 'Convert.ToString(ulong, IFormatProvider)'. If the result of 'Convert.ToString(ulong, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="DiskManagement.cs" Line="28">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'DiskManagement.GetDiskSpace(string)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NativeMethods" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#SHEmptyRecycleBin(System.IntPtr,System.String,System.UInt32)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="1" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Name="ParameterImplicitAnsi" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'pszRootPath' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PrivilegeException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'PrivilegeException': protected PrivilegeException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'PrivilegeException': public PrivilegeException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'PrivilegeException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="RestartOption" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ShutDown" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ShutDown" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'ShutDown' in member name 'RestartOption.ShutDown' exists as a discrete term. If your usage is intended to be single word, case it as 'Shutdown' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ShellOps" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#fAnyOperationsAborted" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="f" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="ShellOps.cs" Line="349">Correct the casing of 'f' in member name 'ShellOps.fAnyOperationsAborted' by changing it to 'F'.</Issue>
            </Message>
            <Message TypeName="PropertiesShouldNotBeWriteOnly" Category="Microsoft.Design" CheckId="CA1044" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="AddGetter" Certainty="95" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="ShellOps.cs" Line="349">Because property 'ShellOps.fAnyOperationsAborted' is write-only, either add a property getter with an accessibility that is greater than or equal to its setter or convert this property into a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#hNameMappings" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="h" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="ShellOps.cs" Line="357">Correct the casing of 'h' in member name 'ShellOps.hNameMappings' by changing it to 'H'.</Issue>
            </Message>
            <Message TypeName="PropertiesShouldNotBeWriteOnly" Category="Microsoft.Design" CheckId="CA1044" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="AddGetter" Certainty="95" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="ShellOps.cs" Line="357">Because property 'ShellOps.hNameMappings' is write-only, either add a property getter with an accessibility that is greater than or equal to its setter or convert this property into a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#hwnd" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="hwnd" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="ShellOps.cs" Line="317">Correct the casing of 'hwnd' in member name 'ShellOps.hwnd' by changing it to 'Hwnd'.</Issue>
            </Message>
            <Message Id="hwnd" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="ShellOps.cs" Line="317">Correct the spelling of 'hwnd' in member name 'ShellOps.hwnd' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="PropertiesShouldNotBeWriteOnly" Category="Microsoft.Design" CheckId="CA1044" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="AddGetter" Certainty="95" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="ShellOps.cs" Line="317">Because property 'ShellOps.hwnd' is write-only, either add a property getter with an accessibility that is greater than or equal to its setter or convert this property into a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#lpszProgressTitle" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="lpsz" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="ShellOps.cs" Line="365">Correct the casing of 'lpsz' in member name 'ShellOps.lpszProgressTitle' by changing it to 'Lpsz'.</Issue>
            </Message>
            <Message Id="lpsz" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="ShellOps.cs" Line="365">Correct the spelling of 'lpsz' in member name 'ShellOps.lpszProgressTitle' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="PropertiesShouldNotBeWriteOnly" Category="Microsoft.Design" CheckId="CA1044" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="AddGetter" Certainty="95" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="ShellOps.cs" Line="365">Because property 'ShellOps.lpszProgressTitle' is write-only, either add a property getter with an accessibility that is greater than or equal to its setter or convert this property into a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#pFrom" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="p" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="ShellOps.cs" Line="333">Correct the casing of 'p' in member name 'ShellOps.pFrom' by changing it to 'P'.</Issue>
            </Message>
            <Message TypeName="PropertiesShouldNotBeWriteOnly" Category="Microsoft.Design" CheckId="CA1044" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="AddGetter" Certainty="95" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="ShellOps.cs" Line="333">Because property 'ShellOps.pFrom' is write-only, either add a property getter with an accessibility that is greater than or equal to its setter or convert this property into a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#pTo" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="p" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="ShellOps.cs" Line="341">Correct the casing of 'p' in member name 'ShellOps.pTo' by changing it to 'P'.</Issue>
            </Message>
            <Message TypeName="PropertiesShouldNotBeWriteOnly" Category="Microsoft.Design" CheckId="CA1044" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="AddGetter" Certainty="95" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="ShellOps.cs" Line="341">Because property 'ShellOps.pTo' is write-only, either add a property getter with an accessibility that is greater than or equal to its setter or convert this property into a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ShellChangeDirNotify(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Dir" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="ShellOps.cs" Line="509">Correct the spelling of 'Dir' in member name 'ShellOps.ShellChangeDirNotify(string)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ShellOps+FILEOP_FLAGS" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="FILEOP" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'FILEOP' in type name 'ShellOps.FILEOP_FLAGS' by changing it to 'Fileop'.</Issue>
          </Message>
          <Message Id="FLAGS" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'FLAGS' in type name 'ShellOps.FILEOP_FLAGS' by changing it to 'Flags'.</Issue>
          </Message>
          <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="95" Level="Error">Remove the underscores from type name 'ShellOps.FILEOP_FLAGS'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'ShellOps.FILEOP_FLAGS'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message Id="FLAGS" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
           <Issue Name="TypeNoAlternate" Certainty="95" Level="Error">Replace the term 'FLAGS' in type name 'ShellOps.FILEOP_FLAGS' with an appropriate alternate or remove it entirely.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Flag" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Flag" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberNoAlternate" Certainty="95" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="ShellOps.cs" Line="443">Replace the term 'Flag' in member name 'ShellOps.FILEOP_FLAGS.Flag' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FOF_ALLOWUNDO" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ShellOps.FILEOP_FLAGS.FOF_ALLOWUNDO' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FOF_CONFIRMMOUSE" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ShellOps.FILEOP_FLAGS.FOF_CONFIRMMOUSE' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FOF_FILESONLY" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ShellOps.FILEOP_FLAGS.FOF_FILESONLY' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FOF_MULTIDESTFILES" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ShellOps.FILEOP_FLAGS.FOF_MULTIDESTFILES' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FOF_NO_CONNECTED_ELEMENTS" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ShellOps.FILEOP_FLAGS.FOF_NO_CONNECTED_ELEMENTS' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FOF_NOCONFIRMATION" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ShellOps.FILEOP_FLAGS.FOF_NOCONFIRMATION' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FOF_NOCONFIRMMKDIR" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ShellOps.FILEOP_FLAGS.FOF_NOCONFIRMMKDIR' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FOF_NOCOPYSECURITYATTRIBS" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ShellOps.FILEOP_FLAGS.FOF_NOCOPYSECURITYATTRIBS' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FOF_NOERRORUI" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ShellOps.FILEOP_FLAGS.FOF_NOERRORUI' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FOF_NORECURSEREPARSE" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ShellOps.FILEOP_FLAGS.FOF_NORECURSEREPARSE' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FOF_NORECURSION" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ShellOps.FILEOP_FLAGS.FOF_NORECURSION' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FOF_RENAMEONCOLLISION" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ShellOps.FILEOP_FLAGS.FOF_RENAMEONCOLLISION' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FOF_SILENT" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ShellOps.FILEOP_FLAGS.FOF_SILENT' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FOF_SIMPLEPROGRESS" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ShellOps.FILEOP_FLAGS.FOF_SIMPLEPROGRESS' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FOF_WANTMAPPINGHANDLE" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ShellOps.FILEOP_FLAGS.FOF_WANTMAPPINGHANDLE' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FOF_WANTNUKEWARNING" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ShellOps.FILEOP_FLAGS.FOF_WANTNUKEWARNING' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TempFile" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="tempColl" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="TempFile.cs" Line="66">'TempFile' contains field 'TempFile.tempColl' that is of IDisposable type: 'TempFileCollection'. Change the Dispose method on 'TempFile' to call Dispose or Close on this field.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TempFileName" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_TempFileName()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Console.WriteLine(System.String,System.Object)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
               <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="TempFile.cs" Line="51">Method 'TempFile.TempFileName.get()' passes a literal string as parameter 'format' of a call to 'Console.WriteLine(string, object)'. Retrieve the following string(s) from a resource table instead: "Temp file created: {0}".</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="UserActivityHook" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Boolean,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Install" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="UserActivityHook.cs" Line="495">In member 'UserActivityHook.UserActivityHook(bool, bool)', correct the casing of 'Install' in parameter name 'InstallKeyboardHook' by changing it to 'install'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="UserActivityHook.cs" Line="495">In member 'UserActivityHook.UserActivityHook(bool, bool)', correct the casing of 'Install' in parameter name 'InstallMouseHook' by changing it to 'install'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CallNextHookEx(System.Int32,System.Int32,System.Int32,System.IntPtr)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'UserActivityHook.CallNextHookEx(int, int, int, IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message Id="0" TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Error">As it is declared in your code, parameter 'idHook' of P/Invoke 'UserActivityHook.CallNextHookEx(int, int, int, IntPtr)' will be 4 bytes wide on 64-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 8 bytes wide on 64-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'int'.</Issue>
            </Message>
            <Message Id="2" TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Error">As it is declared in your code, parameter 'wParam' of P/Invoke 'UserActivityHook.CallNextHookEx(int, int, int, IntPtr)' will be 4 bytes wide on 64-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 8 bytes wide on 64-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'int'.</Issue>
            </Message>
            <Message Id="return" TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Name="Return" Certainty="95" Level="Error">As it is declared in your code, the return type of P/Invoke 'UserActivityHook.CallNextHookEx(int, int, int, IntPtr)' will be 4 bytes wide on 64-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 8 bytes wide on 64-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'int'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetKeyboardState(System.Byte[])" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'UserActivityHook.GetKeyboardState(byte[])' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetKeyState(System.Int32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'UserActivityHook.GetKeyState(int)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#KeyboardHookProc(System.Int32,System.Int32,System.IntPtr)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="AxsUtils.Win32.UserActivityHook.GetKeyboardState(System.Byte[])" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="UserActivityHook.cs" Line="761">'UserActivityHook.KeyboardHookProc(int, int, IntPtr)' calls 'UserActivityHook.GetKeyboardState(byte[])' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
            </Message>
            <Message Id="System.Char.ToUpper(System.Char)" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="UserActivityHook.cs" Line="770">Because the behavior of 'char.ToUpper(char)' could vary based on the current user's locale settings, replace this call in 'UserActivityHook.KeyboardHookProc(int, int, IntPtr)' with a call to 'char.ToUpper(char, CultureInfo)'. If the result of 'char.ToUpper(char, CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetWindowsHookEx(System.Int32,AxsUtils.Win32.UserActivityHook+HookProc,System.IntPtr,System.Int32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'UserActivityHook.SetWindowsHookEx(int, UserActivityHook.HookProc, IntPtr, int)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message Id="return" TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Name="Return" Certainty="95" Level="Error">As it is declared in your code, the return type of P/Invoke 'UserActivityHook.SetWindowsHookEx(int, UserActivityHook.HookProc, IntPtr, int)' will be 4 bytes wide on 64-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 8 bytes wide on 64-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'int'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Start(System.Boolean,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Install" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="UserActivityHook.cs" Line="528">In member 'UserActivityHook.Start(bool, bool)', correct the casing of 'Install' in parameter name 'InstallKeyboardHook' by changing it to 'install'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="UserActivityHook.cs" Line="528">In member 'UserActivityHook.Start(bool, bool)', correct the casing of 'Install' in parameter name 'InstallMouseHook' by changing it to 'install'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Stop(System.Boolean,System.Boolean,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Throw" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="UserActivityHook.cs" Line="595">In member 'UserActivityHook.Stop(bool, bool, bool)', correct the casing of 'Throw' in parameter name 'ThrowExceptions' by changing it to 'throw'.</Issue>
            </Message>
            <Message Id="Uninstall" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="UserActivityHook.cs" Line="595">In member 'UserActivityHook.Stop(bool, bool, bool)', correct the casing of 'Uninstall' in parameter name 'UninstallKeyboardHook' by changing it to 'uninstall'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="UserActivityHook.cs" Line="595">In member 'UserActivityHook.Stop(bool, bool, bool)', correct the casing of 'Uninstall' in parameter name 'UninstallMouseHook' by changing it to 'uninstall'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToAscii(System.Int32,System.Int32,System.Byte[],System.Byte[],System.Int32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'UserActivityHook.ToAscii(int, int, byte[], byte[], int)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UnhookWindowsHookEx(System.Int32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'UserActivityHook.UnhookWindowsHookEx(int)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UserActivityHook+MouseHookStruct" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Messages>
          <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
           <Issue Certainty="75" Level="Warning">'UserActivityHook.MouseHookStruct' is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="UserActivityHook+POINT" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Messages>
          <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
           <Issue Certainty="75" Level="Warning">'UserActivityHook.POINT' is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="WindowsController" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
           <Issue Name="CSharp2_0" Certainty="90" Level="Error">Because type 'WindowsController' contains only 'static' members, mark it as 'static' to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#AdjustTokenPrivileges(System.IntPtr,System.Int32,AxsUtils.Win32.TOKEN_PRIVILEGES&amp;,System.Int32,AxsUtils.Win32.TOKEN_PRIVILEGES&amp;,System.Int32&amp;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'WindowsController.AdjustTokenPrivileges(IntPtr, int, ref TOKEN_PRIVILEGES, int, ref TOKEN_PRIVILEGES, ref int)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CheckEntryPoint(System.String,System.String)" Kind="Method" Static="True" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="AxsUtils.Win32.WindowsController.FreeLibrary(System.IntPtr)" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WindowsController.cs" Line="277">'WindowsController.CheckEntryPoint(string, string)' calls 'WindowsController.FreeLibrary(IntPtr)' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WindowsController.cs" Line="280">'WindowsController.CheckEntryPoint(string, string)' calls 'WindowsController.FreeLibrary(IntPtr)' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExitWindowsEx(System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'WindowsController.ExitWindowsEx(int, int)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FormatError(System.Int32)" Kind="Method" Static="True" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WindowsController.cs" Line="297">Modify 'WindowsController.FormatError(int)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="AxsUtils.Win32.WindowsController.FormatMessage(System.Int32,System.IntPtr,System.Int32,System.Int32,System.Text.StringBuilder,System.Int32,System.Int32)" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WindowsController.cs" Line="294">'WindowsController.FormatError(int)' calls 'WindowsController.FormatMessage(int, IntPtr, int, int, StringBuilder, int, int)' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WindowsController.cs" Line="299">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'WindowsController.FormatError(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FormatMessage(System.Int32,System.IntPtr,System.Int32,System.Int32,System.Text.StringBuilder,System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'WindowsController.FormatMessage(int, IntPtr, int, int, StringBuilder, int, int)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokeEntryPointsShouldExist" Category="Microsoft.Interoperability" CheckId="CA1400" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Certainty="50" Level="CriticalWarning">Correct the declaration of 'WindowsController.FormatMessage(int, IntPtr, int, int, StringBuilder, int, int)' so that it correctly points to an existing entry point in 'user32.dll'. The unmanaged entry point name currently linked to is FormatMessageA.</Issue>
            </Message>
            <Message Id="4" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Name="ParameterImplicitAnsi" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lpBuffer' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FreeLibrary(System.IntPtr)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'WindowsController.FreeLibrary(IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetProcAddress(System.IntPtr,System.String)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'WindowsController.GetProcAddress(IntPtr, string)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message Id="1" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Name="ParameterImplicitAnsi" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lpProcName' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadLibrary(System.String)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'WindowsController.LoadLibrary(string)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message Id="0" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Name="ParameterImplicitAnsi" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lpLibFileName' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LookupPrivilegeValue(System.String,System.String,AxsUtils.Win32.LUID&amp;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'WindowsController.LookupPrivilegeValue(string, string, ref LUID)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message Id="0" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Name="ParameterImplicitAnsi" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lpSystemName' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
            <Message Id="1" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Name="ParameterImplicitAnsi" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lpName' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OpenProcessToken(System.IntPtr,System.Int32,System.IntPtr&amp;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'WindowsController.OpenProcessToken(IntPtr, int, ref IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetSuspendState(System.Int32,System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'WindowsController.SetSuspendState(int, int, int)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message Id="0" TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Error">As it is declared in your code, parameter 'Hibernate' of P/Invoke 'WindowsController.SetSuspendState(int, int, int)' will be 4 bytes wide on 32-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 1 bytes wide on 32-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'int'.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Error">As it is declared in your code, parameter 'Hibernate' of P/Invoke 'WindowsController.SetSuspendState(int, int, int)' will be 4 bytes wide on 64-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 1 bytes wide on 64-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'int'.</Issue>
            </Message>
            <Message Id="1" TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Error">As it is declared in your code, parameter 'ForceCritical' of P/Invoke 'WindowsController.SetSuspendState(int, int, int)' will be 4 bytes wide on 32-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 1 bytes wide on 32-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'int'.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Error">As it is declared in your code, parameter 'ForceCritical' of P/Invoke 'WindowsController.SetSuspendState(int, int, int)' will be 4 bytes wide on 64-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 1 bytes wide on 64-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'int'.</Issue>
            </Message>
            <Message Id="2" TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Error">As it is declared in your code, parameter 'DisableWakeEvent' of P/Invoke 'WindowsController.SetSuspendState(int, int, int)' will be 4 bytes wide on 32-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 1 bytes wide on 32-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'int'.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Error">As it is declared in your code, parameter 'DisableWakeEvent' of P/Invoke 'WindowsController.SetSuspendState(int, int, int)' will be 4 bytes wide on 64-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 1 bytes wide on 64-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'int'.</Issue>
            </Message>
            <Message Id="return" TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Name="Return" Certainty="95" Level="Error">As it is declared in your code, the return type of P/Invoke 'WindowsController.SetSuspendState(int, int, int)' will be 4 bytes wide on 32-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 1 bytes wide on 32-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'int'.</Issue>
             <Issue Name="Return" Certainty="95" Level="Error">As it is declared in your code, the return type of P/Invoke 'WindowsController.SetSuspendState(int, int, int)' will be 4 bytes wide on 64-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 1 bytes wide on 64-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'int'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SuspendSystem(System.Boolean,System.Boolean)" Kind="Method" Static="True" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="AxsUtils.Win32.WindowsController.SetSuspendState(System.Int32,System.Int32,System.Int32)" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WindowsController.cs" Line="262">'WindowsController.SuspendSystem(bool, bool)' calls 'WindowsController.SetSuspendState(int, int, int)' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
            </Message>
            <Message Id="SetSuspendState" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WindowsController.cs" Line="261">Correct the spelling of the unrecognized token 'SetSuspendState' in the literal '"The SetSuspendState method is not supported on this system!"'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="WinRegistry" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CreateHKCRKey(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="41">Method 'WinRegistry.CreateHKCRKey(string)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "AxsUtils.WinRegistry.CreateHKCRKey -&gt; ".</Issue>
            </Message>
            <Message Id="HKCR" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="33">Correct the casing of 'HKCR' in member name 'WinRegistry.CreateHKCRKey(string)' by changing it to 'Hkcr'.</Issue>
            </Message>
            <Message Id="AxsUtils" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="41">Correct the spelling of the unrecognized token 'AxsUtils' in the literal '"AxsUtils.WinRegistry.CreateHKCRKey -&gt; "'.</Issue>
            </Message>
            <Message Id="CreateHKCRKey" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="41">Correct the spelling of the unrecognized token 'CreateHKCRKey' in the literal '"AxsUtils.WinRegistry.CreateHKCRKey -&gt; "'.</Issue>
            </Message>
            <Message Id="WinRegistry" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="41">Correct the spelling of the unrecognized token 'WinRegistry' in the literal '"AxsUtils.WinRegistry.CreateHKCRKey -&gt; "'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeleteHKCRKey(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="162">Method 'WinRegistry.DeleteHKCRKey(string)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "AxsUtils.WinRegistry.DeleteHKCRKey -&gt; ".</Issue>
            </Message>
            <Message Id="HKCR" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="154">Correct the casing of 'HKCR' in member name 'WinRegistry.DeleteHKCRKey(string)' by changing it to 'Hkcr'.</Issue>
            </Message>
            <Message Id="AxsUtils" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="162">Correct the spelling of the unrecognized token 'AxsUtils' in the literal '"AxsUtils.WinRegistry.DeleteHKCRKey -&gt; "'.</Issue>
            </Message>
            <Message Id="DeleteHKCRKey" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="162">Correct the spelling of the unrecognized token 'DeleteHKCRKey' in the literal '"AxsUtils.WinRegistry.DeleteHKCRKey -&gt; "'.</Issue>
            </Message>
            <Message Id="WinRegistry" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="162">Correct the spelling of the unrecognized token 'WinRegistry' in the literal '"AxsUtils.WinRegistry.DeleteHKCRKey -&gt; "'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeleteHKCUKey(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="182">Method 'WinRegistry.DeleteHKCUKey(string)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "AxsUtils.WinRegistry.DeleteHKLMKey -&gt; ".</Issue>
            </Message>
            <Message Id="HKCU" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="174">Correct the casing of 'HKCU' in member name 'WinRegistry.DeleteHKCUKey(string)' by changing it to 'Hkcu'.</Issue>
            </Message>
            <Message Id="AxsUtils" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="182">Correct the spelling of the unrecognized token 'AxsUtils' in the literal '"AxsUtils.WinRegistry.DeleteHKLMKey -&gt; "'.</Issue>
            </Message>
            <Message Id="DeleteHKLMKey" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="182">Correct the spelling of the unrecognized token 'DeleteHKLMKey' in the literal '"AxsUtils.WinRegistry.DeleteHKLMKey -&gt; "'.</Issue>
            </Message>
            <Message Id="WinRegistry" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="182">Correct the spelling of the unrecognized token 'WinRegistry' in the literal '"AxsUtils.WinRegistry.DeleteHKLMKey -&gt; "'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeleteHKCUValue(System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="142">Method 'WinRegistry.DeleteHKCUValue(string, string)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "AxsUtils.WinRegistry.DeleteHKCUValue -&gt; ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="138">Method 'WinRegistry.DeleteHKCUValue(string, string)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "Can\'t delete value ,  on key ,  -&gt; ".</Issue>
            </Message>
            <Message Id="HKCU" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="126">Correct the casing of 'HKCU' in member name 'WinRegistry.DeleteHKCUValue(string, string)' by changing it to 'Hkcu'.</Issue>
            </Message>
            <Message Id="keypath" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="126">In method 'WinRegistry.DeleteHKCUValue(string, string)', correct the spelling of 'keypath' in parameter name 'keypath' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="AxsUtils" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="142">Correct the spelling of the unrecognized token 'AxsUtils' in the literal '"AxsUtils.WinRegistry.DeleteHKCUValue -&gt; "'.</Issue>
            </Message>
            <Message Id="DeleteHKCUValue" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="142">Correct the spelling of the unrecognized token 'DeleteHKCUValue' in the literal '"AxsUtils.WinRegistry.DeleteHKCUValue -&gt; "'.</Issue>
            </Message>
            <Message Id="WinRegistry" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="142">Correct the spelling of the unrecognized token 'WinRegistry' in the literal '"AxsUtils.WinRegistry.DeleteHKCUValue -&gt; "'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeleteHKLMKey(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="86">Method 'WinRegistry.DeleteHKLMKey(string)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "AxsUtils.WinRegistry.DeleteHKLMKey -&gt; ".</Issue>
            </Message>
            <Message Id="HKLM" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="70">Correct the casing of 'HKLM' in member name 'WinRegistry.DeleteHKLMKey(string)' by changing it to 'Hklm'.</Issue>
            </Message>
            <Message Id="AxsUtils" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="86">Correct the spelling of the unrecognized token 'AxsUtils' in the literal '"AxsUtils.WinRegistry.DeleteHKLMKey -&gt; "'.</Issue>
            </Message>
            <Message Id="DeleteHKLMKey" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="86">Correct the spelling of the unrecognized token 'DeleteHKLMKey' in the literal '"AxsUtils.WinRegistry.DeleteHKLMKey -&gt; "'.</Issue>
            </Message>
            <Message Id="WinRegistry" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="86">Correct the spelling of the unrecognized token 'WinRegistry' in the literal '"AxsUtils.WinRegistry.DeleteHKLMKey -&gt; "'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeleteHKLMKeyAll(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="59">Method 'WinRegistry.DeleteHKLMKeyAll(string)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "AxsUtils.WinRegistry.DeleteHKLMKeyAll -&gt; Can\'t delete key: ,  -&gt; ".</Issue>
            </Message>
            <Message Id="HKLM" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="51">Correct the casing of 'HKLM' in member name 'WinRegistry.DeleteHKLMKeyAll(string)' by changing it to 'Hklm'.</Issue>
            </Message>
            <Message Id="AxsUtils" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="59">Correct the spelling of the unrecognized token 'AxsUtils' in the literal '"AxsUtils.WinRegistry.DeleteHKLMKeyAll -&gt; Can\'t delete key: "'.</Issue>
            </Message>
            <Message Id="DeleteHKLMKeyAll" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="59">Correct the spelling of the unrecognized token 'DeleteHKLMKeyAll' in the literal '"AxsUtils.WinRegistry.DeleteHKLMKeyAll -&gt; Can\'t delete key: "'.</Issue>
            </Message>
            <Message Id="WinRegistry" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="59">Correct the spelling of the unrecognized token 'WinRegistry' in the literal '"AxsUtils.WinRegistry.DeleteHKLMKeyAll -&gt; Can\'t delete key: "'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeleteHKLMValue(System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="113">Method 'WinRegistry.DeleteHKLMValue(string, string)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "AxsUtils.WinRegistry.DeleteHKCUValue -&gt; ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="109">Method 'WinRegistry.DeleteHKLMValue(string, string)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "Can\'t delete value ,  on key ,  -&gt; ".</Issue>
            </Message>
            <Message Id="HKLM" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="97">Correct the casing of 'HKLM' in member name 'WinRegistry.DeleteHKLMValue(string, string)' by changing it to 'Hklm'.</Issue>
            </Message>
            <Message Id="keypath" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="97">In method 'WinRegistry.DeleteHKLMValue(string, string)', correct the spelling of 'keypath' in parameter name 'keypath' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="AxsUtils" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="113">Correct the spelling of the unrecognized token 'AxsUtils' in the literal '"AxsUtils.WinRegistry.DeleteHKCUValue -&gt; "'.</Issue>
            </Message>
            <Message Id="DeleteHKCUValue" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="113">Correct the spelling of the unrecognized token 'DeleteHKCUValue' in the literal '"AxsUtils.WinRegistry.DeleteHKCUValue -&gt; "'.</Issue>
            </Message>
            <Message Id="WinRegistry" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="113">Correct the spelling of the unrecognized token 'WinRegistry' in the literal '"AxsUtils.WinRegistry.DeleteHKCUValue -&gt; "'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAssociatedProgram(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Convert.ToString(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="808">Because the behavior of 'Convert.ToString(object)' could vary based on the current user's locale settings, replace this call in 'WinRegistry.GetAssociatedProgram(string)' with a call to 'Convert.ToString(object, IFormatProvider)'. If the result of 'Convert.ToString(object, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="811">Because the behavior of 'Convert.ToString(object)' could vary based on the current user's locale settings, replace this call in 'WinRegistry.GetAssociatedProgram(string)' with a call to 'Convert.ToString(object, IFormatProvider)'. If the result of 'Convert.ToString(object, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetFileType(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Convert.ToString(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="773">Because the behavior of 'Convert.ToString(object)' could vary based on the current user's locale settings, replace this call in 'WinRegistry.GetFileType(string)' with a call to 'Convert.ToString(object, IFormatProvider)'. If the result of 'Convert.ToString(object, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetHKCRValue(System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="348">Method 'WinRegistry.GetHKCRValue(string, string, string)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "AxsUtils.WinRegistry.GetHKCRValue -&gt; ".</Issue>
            </Message>
            <Message Id="System.Console.WriteLine(System.String,System.Object)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="342">Method 'WinRegistry.GetHKCRValue(string, string, string)' passes a literal string as parameter 'format' of a call to 'Console.WriteLine(string, object)'. Retrieve the following string(s) from a resource table instead: "key {0} is NULL".</Issue>
            </Message>
            <Message Id="HKCR" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="316">Correct the casing of 'HKCR' in member name 'WinRegistry.GetHKCRValue(string, string, string)' by changing it to 'Hkcr'.</Issue>
            </Message>
            <Message Id="keyname" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="316">In method 'WinRegistry.GetHKCRValue(string, string, string)', correct the spelling of 'keyname' in parameter name 'keyname' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="keypath" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="316">In method 'WinRegistry.GetHKCRValue(string, string, string)', correct the spelling of 'keypath' in parameter name 'keypath' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="AxsUtils" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="348">Correct the spelling of the unrecognized token 'AxsUtils' in the literal '"AxsUtils.WinRegistry.GetHKCRValue -&gt; "'.</Issue>
            </Message>
            <Message Id="GetHKCRValue" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="348">Correct the spelling of the unrecognized token 'GetHKCRValue' in the literal '"AxsUtils.WinRegistry.GetHKCRValue -&gt; "'.</Issue>
            </Message>
            <Message Id="WinRegistry" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="348">Correct the spelling of the unrecognized token 'WinRegistry' in the literal '"AxsUtils.WinRegistry.GetHKCRValue -&gt; "'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetHKCUDWORDValue(System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="538">Method 'WinRegistry.GetHKCUDWORDValue(string, string)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "AxsUtils.WinRegistry.GetHKCUDWORDValue -&gt; ".</Issue>
            </Message>
            <Message Id="System.Console.WriteLine(System.String,System.Object)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="529">Method 'WinRegistry.GetHKCUDWORDValue(string, string)' passes a literal string as parameter 'format' of a call to 'Console.WriteLine(string, object)'. Retrieve the following string(s) from a resource table instead: "Can\'t find value {0} in this key".</Issue>
            </Message>
            <Message Id="HKCUDWORD" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="507">Correct the casing of 'HKCUDWORD' in member name 'WinRegistry.GetHKCUDWORDValue(string, string)' by changing it to 'Hkcudword'.</Issue>
            </Message>
            <Message Id="keyname" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="507">In method 'WinRegistry.GetHKCUDWORDValue(string, string)', correct the spelling of 'keyname' in parameter name 'keyname' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="AxsUtils" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="538">Correct the spelling of the unrecognized token 'AxsUtils' in the literal '"AxsUtils.WinRegistry.GetHKCUDWORDValue -&gt; "'.</Issue>
            </Message>
            <Message Id="GetHKCUDWORDValue" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="538">Correct the spelling of the unrecognized token 'GetHKCUDWORDValue' in the literal '"AxsUtils.WinRegistry.GetHKCUDWORDValue -&gt; "'.</Issue>
            </Message>
            <Message Id="WinRegistry" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="538">Correct the spelling of the unrecognized token 'WinRegistry' in the literal '"AxsUtils.WinRegistry.GetHKCUDWORDValue -&gt; "'.</Issue>
            </Message>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="523">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'WinRegistry.GetHKCUDWORDValue(string, string)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetHKCUSubkeys(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="269">Method 'WinRegistry.GetHKCUSubkeys(string)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "AxsUtils.WinRegistry.GetHKLMValues -&gt; ".</Issue>
            </Message>
            <Message Id="HKCU" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="254">Correct the casing of 'HKCU' in member name 'WinRegistry.GetHKCUSubkeys(string)' by changing it to 'Hkcu'.</Issue>
            </Message>
            <Message Id="keypath" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="254">In method 'WinRegistry.GetHKCUSubkeys(string)', correct the spelling of 'keypath' in parameter name 'keypath' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="AxsUtils" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="269">Correct the spelling of the unrecognized token 'AxsUtils' in the literal '"AxsUtils.WinRegistry.GetHKLMValues -&gt; "'.</Issue>
            </Message>
            <Message Id="GetHKLMValues" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="269">Correct the spelling of the unrecognized token 'GetHKLMValues' in the literal '"AxsUtils.WinRegistry.GetHKLMValues -&gt; "'.</Issue>
            </Message>
            <Message Id="WinRegistry" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="269">Correct the spelling of the unrecognized token 'WinRegistry' in the literal '"AxsUtils.WinRegistry.GetHKLMValues -&gt; "'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetHKCUValue(System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="493">Method 'WinRegistry.GetHKCUValue(string, string)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "AxsUtils.WinRegistry.GetHKCUValue -&gt; ".</Issue>
            </Message>
            <Message Id="System.Console.WriteLine(System.String,System.Object)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="483">Method 'WinRegistry.GetHKCUValue(string, string)' passes a literal string as parameter 'format' of a call to 'Console.WriteLine(string, object)'. Retrieve the following string(s) from a resource table instead: "Can\'t find value {0} in this key ".</Issue>
            </Message>
            <Message Id="HKCU" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="461">Correct the casing of 'HKCU' in member name 'WinRegistry.GetHKCUValue(string, string)' by changing it to 'Hkcu'.</Issue>
            </Message>
            <Message Id="keyname" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="461">In method 'WinRegistry.GetHKCUValue(string, string)', correct the spelling of 'keyname' in parameter name 'keyname' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="AxsUtils" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="493">Correct the spelling of the unrecognized token 'AxsUtils' in the literal '"AxsUtils.WinRegistry.GetHKCUValue -&gt; "'.</Issue>
            </Message>
            <Message Id="GetHKCUValue" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="493">Correct the spelling of the unrecognized token 'GetHKCUValue' in the literal '"AxsUtils.WinRegistry.GetHKCUValue -&gt; "'.</Issue>
            </Message>
            <Message Id="WinRegistry" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="493">Correct the spelling of the unrecognized token 'WinRegistry' in the literal '"AxsUtils.WinRegistry.GetHKCUValue -&gt; "'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetHKCUValues(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="239">Method 'WinRegistry.GetHKCUValues(string)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "AxsUtils.WinRegistry.GetHKLMValues -&gt; ".</Issue>
            </Message>
            <Message Id="HKCU" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="224">Correct the casing of 'HKCU' in member name 'WinRegistry.GetHKCUValues(string)' by changing it to 'Hkcu'.</Issue>
            </Message>
            <Message Id="keypath" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="224">In method 'WinRegistry.GetHKCUValues(string)', correct the spelling of 'keypath' in parameter name 'keypath' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="AxsUtils" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="239">Correct the spelling of the unrecognized token 'AxsUtils' in the literal '"AxsUtils.WinRegistry.GetHKLMValues -&gt; "'.</Issue>
            </Message>
            <Message Id="GetHKLMValues" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="239">Correct the spelling of the unrecognized token 'GetHKLMValues' in the literal '"AxsUtils.WinRegistry.GetHKLMValues -&gt; "'.</Issue>
            </Message>
            <Message Id="WinRegistry" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="239">Correct the spelling of the unrecognized token 'WinRegistry' in the literal '"AxsUtils.WinRegistry.GetHKLMValues -&gt; "'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetHKLMBlob(System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="385">Method 'WinRegistry.GetHKLMBlob(string, string)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: ": does not exist".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="394">Method 'WinRegistry.GetHKLMBlob(string, string)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "AxsUtils.WinRegistry.GetHKLMBlob -&gt; ".</Issue>
            </Message>
            <Message Id="System.Console.WriteLine(System.String,System.Object)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="378">Method 'WinRegistry.GetHKLMBlob(string, string)' passes a literal string as parameter 'format' of a call to 'Console.WriteLine(string, object)'. Retrieve the following string(s) from a resource table instead: "Can\'t find value {0} in this key".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="392">Modify 'WinRegistry.GetHKLMBlob(string, string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="HKLM" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="356">Correct the casing of 'HKLM' in member name 'WinRegistry.GetHKLMBlob(string, string)' by changing it to 'Hklm'.</Issue>
            </Message>
            <Message Id="keyname" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="356">In method 'WinRegistry.GetHKLMBlob(string, string)', correct the spelling of 'keyname' in parameter name 'keyname' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="AxsUtils" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="394">Correct the spelling of the unrecognized token 'AxsUtils' in the literal '"AxsUtils.WinRegistry.GetHKLMBlob -&gt; "'.</Issue>
            </Message>
            <Message Id="GetHKLMBlob" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="394">Correct the spelling of the unrecognized token 'GetHKLMBlob' in the literal '"AxsUtils.WinRegistry.GetHKLMBlob -&gt; "'.</Issue>
            </Message>
            <Message Id="WinRegistry" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="394">Correct the spelling of the unrecognized token 'WinRegistry' in the literal '"AxsUtils.WinRegistry.GetHKLMBlob -&gt; "'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetHKLMSubkeys(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="300">Method 'WinRegistry.GetHKLMSubkeys(string)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "AxsUtils.WinRegistry.GetHKLMValues -&gt; ".</Issue>
            </Message>
            <Message Id="HKLM" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="285">Correct the casing of 'HKLM' in member name 'WinRegistry.GetHKLMSubkeys(string)' by changing it to 'Hklm'.</Issue>
            </Message>
            <Message Id="keypath" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="285">In method 'WinRegistry.GetHKLMSubkeys(string)', correct the spelling of 'keypath' in parameter name 'keypath' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="AxsUtils" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="300">Correct the spelling of the unrecognized token 'AxsUtils' in the literal '"AxsUtils.WinRegistry.GetHKLMValues -&gt; "'.</Issue>
            </Message>
            <Message Id="GetHKLMValues" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="300">Correct the spelling of the unrecognized token 'GetHKLMValues' in the literal '"AxsUtils.WinRegistry.GetHKLMValues -&gt; "'.</Issue>
            </Message>
            <Message Id="WinRegistry" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="300">Correct the spelling of the unrecognized token 'WinRegistry' in the literal '"AxsUtils.WinRegistry.GetHKLMValues -&gt; "'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetHKLMValue(System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="438">Method 'WinRegistry.GetHKLMValue(string, string)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: ": does not exist".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="447">Method 'WinRegistry.GetHKLMValue(string, string)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "AxsUtils.WinRegistry.GetHKLMValue -&gt; ".</Issue>
            </Message>
            <Message Id="System.Console.WriteLine(System.String,System.Object)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="431">Method 'WinRegistry.GetHKLMValue(string, string)' passes a literal string as parameter 'format' of a call to 'Console.WriteLine(string, object)'. Retrieve the following string(s) from a resource table instead: "Can\'t find value {0} in this key".</Issue>
            </Message>
            <Message Id="HKLM" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="409">Correct the casing of 'HKLM' in member name 'WinRegistry.GetHKLMValue(string, string)' by changing it to 'Hklm'.</Issue>
            </Message>
            <Message Id="keyname" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="409">In method 'WinRegistry.GetHKLMValue(string, string)', correct the spelling of 'keyname' in parameter name 'keyname' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="AxsUtils" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="447">Correct the spelling of the unrecognized token 'AxsUtils' in the literal '"AxsUtils.WinRegistry.GetHKLMValue -&gt; "'.</Issue>
            </Message>
            <Message Id="GetHKLMValue" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="447">Correct the spelling of the unrecognized token 'GetHKLMValue' in the literal '"AxsUtils.WinRegistry.GetHKLMValue -&gt; "'.</Issue>
            </Message>
            <Message Id="WinRegistry" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="447">Correct the spelling of the unrecognized token 'WinRegistry' in the literal '"AxsUtils.WinRegistry.GetHKLMValue -&gt; "'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetHKLMValues(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="210">Method 'WinRegistry.GetHKLMValues(string)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "AxsUtils.WinRegistry.GetHKLMValues -&gt; ".</Issue>
            </Message>
            <Message Id="HKLM" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="195">Correct the casing of 'HKLM' in member name 'WinRegistry.GetHKLMValues(string)' by changing it to 'Hklm'.</Issue>
            </Message>
            <Message Id="keypath" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="195">In method 'WinRegistry.GetHKLMValues(string)', correct the spelling of 'keypath' in parameter name 'keypath' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="AxsUtils" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="210">Correct the spelling of the unrecognized token 'AxsUtils' in the literal '"AxsUtils.WinRegistry.GetHKLMValues -&gt; "'.</Issue>
            </Message>
            <Message Id="GetHKLMValues" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="210">Correct the spelling of the unrecognized token 'GetHKLMValues' in the literal '"AxsUtils.WinRegistry.GetHKLMValues -&gt; "'.</Issue>
            </Message>
            <Message Id="WinRegistry" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="210">Correct the spelling of the unrecognized token 'WinRegistry' in the literal '"AxsUtils.WinRegistry.GetHKLMValues -&gt; "'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetHKCRValue(System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="586">Method 'WinRegistry.SetHKCRValue(string, string, string, string)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "AxsUtils.WinRegistry.SetHKCRValue -&gt; ".</Issue>
            </Message>
            <Message Id="System.Console.WriteLine(System.String,System.Object)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="577">Method 'WinRegistry.SetHKCRValue(string, string, string, string)' passes a literal string as parameter 'format' of a call to 'Console.WriteLine(string, object)'. Retrieve the following string(s) from a resource table instead: "Can\'t find {0}".</Issue>
            </Message>
            <Message Id="HKCR" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="555">Correct the casing of 'HKCR' in member name 'WinRegistry.SetHKCRValue(string, string, string, string)' by changing it to 'Hkcr'.</Issue>
            </Message>
            <Message Id="keyname" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="555">In method 'WinRegistry.SetHKCRValue(string, string, string, string)', correct the spelling of 'keyname' in parameter name 'keyname' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="keypath" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="555">In method 'WinRegistry.SetHKCRValue(string, string, string, string)', correct the spelling of 'keypath' in parameter name 'keypath' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="valkey" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="555">In method 'WinRegistry.SetHKCRValue(string, string, string, string)', correct the spelling of 'valkey' in parameter name 'valkey' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="AxsUtils" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="586">Correct the spelling of the unrecognized token 'AxsUtils' in the literal '"AxsUtils.WinRegistry.SetHKCRValue -&gt; "'.</Issue>
            </Message>
            <Message Id="SetHKCRValue" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="586">Correct the spelling of the unrecognized token 'SetHKCRValue' in the literal '"AxsUtils.WinRegistry.SetHKCRValue -&gt; "'.</Issue>
            </Message>
            <Message Id="WinRegistry" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="586">Correct the spelling of the unrecognized token 'WinRegistry' in the literal '"AxsUtils.WinRegistry.SetHKCRValue -&gt; "'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetHKCUValue(System.String,System.String,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="742">Method 'WinRegistry.SetHKCUValue(string, string, int)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "AxsUtils.WinRegistry.SetHKCUValue -&gt; ".</Issue>
            </Message>
            <Message Id="HKCU" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="717">Correct the casing of 'HKCU' in member name 'WinRegistry.SetHKCUValue(string, string, int)' by changing it to 'Hkcu'.</Issue>
            </Message>
            <Message Id="keyname" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="717">In method 'WinRegistry.SetHKCUValue(string, string, int)', correct the spelling of 'keyname' in parameter name 'keyname' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="valkey" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="717">In method 'WinRegistry.SetHKCUValue(string, string, int)', correct the spelling of 'valkey' in parameter name 'valkey' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="AxsUtils" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="742">Correct the spelling of the unrecognized token 'AxsUtils' in the literal '"AxsUtils.WinRegistry.SetHKCUValue -&gt; "'.</Issue>
            </Message>
            <Message Id="SetHKCUValue" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="742">Correct the spelling of the unrecognized token 'SetHKCUValue' in the literal '"AxsUtils.WinRegistry.SetHKCUValue -&gt; "'.</Issue>
            </Message>
            <Message Id="WinRegistry" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="742">Correct the spelling of the unrecognized token 'WinRegistry' in the literal '"AxsUtils.WinRegistry.SetHKCUValue -&gt; "'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetHKCUValue(System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="701">Method 'WinRegistry.SetHKCUValue(string, string, string)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "AxsUtils.WinRegistry.SetHKCUValue -&gt; ".</Issue>
            </Message>
            <Message Id="HKCU" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="676">Correct the casing of 'HKCU' in member name 'WinRegistry.SetHKCUValue(string, string, string)' by changing it to 'Hkcu'.</Issue>
            </Message>
            <Message Id="keyname" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="676">In method 'WinRegistry.SetHKCUValue(string, string, string)', correct the spelling of 'keyname' in parameter name 'keyname' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="valkey" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="676">In method 'WinRegistry.SetHKCUValue(string, string, string)', correct the spelling of 'valkey' in parameter name 'valkey' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="AxsUtils" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="701">Correct the spelling of the unrecognized token 'AxsUtils' in the literal '"AxsUtils.WinRegistry.SetHKCUValue -&gt; "'.</Issue>
            </Message>
            <Message Id="SetHKCUValue" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="701">Correct the spelling of the unrecognized token 'SetHKCUValue' in the literal '"AxsUtils.WinRegistry.SetHKCUValue -&gt; "'.</Issue>
            </Message>
            <Message Id="WinRegistry" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="701">Correct the spelling of the unrecognized token 'WinRegistry' in the literal '"AxsUtils.WinRegistry.SetHKCUValue -&gt; "'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetHKLMBlob(System.String,System.String,System.Byte[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="618">Method 'WinRegistry.SetHKLMBlob(string, string, byte[])' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "AxsUtils.WinRegistry.SetHKLMValue -&gt; ".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="615">Modify 'WinRegistry.SetHKLMBlob(string, string, byte[])' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="HKLM" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="593">Correct the casing of 'HKLM' in member name 'WinRegistry.SetHKLMBlob(string, string, byte[])' by changing it to 'Hklm'.</Issue>
            </Message>
            <Message Id="keyname" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="593">In method 'WinRegistry.SetHKLMBlob(string, string, byte[])', correct the spelling of 'keyname' in parameter name 'keyname' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="valkey" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="593">In method 'WinRegistry.SetHKLMBlob(string, string, byte[])', correct the spelling of 'valkey' in parameter name 'valkey' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="AxsUtils" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="618">Correct the spelling of the unrecognized token 'AxsUtils' in the literal '"AxsUtils.WinRegistry.SetHKLMValue -&gt; "'.</Issue>
            </Message>
            <Message Id="SetHKLMValue" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="618">Correct the spelling of the unrecognized token 'SetHKLMValue' in the literal '"AxsUtils.WinRegistry.SetHKLMValue -&gt; "'.</Issue>
            </Message>
            <Message Id="WinRegistry" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="618">Correct the spelling of the unrecognized token 'WinRegistry' in the literal '"AxsUtils.WinRegistry.SetHKLMValue -&gt; "'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetHKLMValue(System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="660">Method 'WinRegistry.SetHKLMValue(string, string, string)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "AxsUtils.WinRegistry.SetHKLMValue -&gt; ".</Issue>
            </Message>
            <Message Id="HKLM" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="635">Correct the casing of 'HKLM' in member name 'WinRegistry.SetHKLMValue(string, string, string)' by changing it to 'Hklm'.</Issue>
            </Message>
            <Message Id="keyname" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="635">In method 'WinRegistry.SetHKLMValue(string, string, string)', correct the spelling of 'keyname' in parameter name 'keyname' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="valkey" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="635">In method 'WinRegistry.SetHKLMValue(string, string, string)', correct the spelling of 'valkey' in parameter name 'valkey' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="AxsUtils" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="660">Correct the spelling of the unrecognized token 'AxsUtils' in the literal '"AxsUtils.WinRegistry.SetHKLMValue -&gt; "'.</Issue>
            </Message>
            <Message Id="SetHKLMValue" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="660">Correct the spelling of the unrecognized token 'SetHKLMValue' in the literal '"AxsUtils.WinRegistry.SetHKLMValue -&gt; "'.</Issue>
            </Message>
            <Message Id="WinRegistry" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Win32" File="WinRegistry.cs" Line="660">Correct the spelling of the unrecognized token 'WinRegistry' in the literal '"AxsUtils.WinRegistry.SetHKLMValue -&gt; "'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="AxsUtils.Xml">
       <Types>
        <Type Name="XmlElementReader" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetElement(System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Xml" File="XmlElementReader.cs" Line="76">In method 'XmlElementReader.GetElement(string, string, string)', call System.IDisposable.Dispose on object 'xmlr' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Codice\VisualStudio2012\AxsUtils\Xml" File="XmlElementReader.cs" Line="79">Modify 'XmlElementReader.GetElement(string, string, string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="subname" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils\Xml" File="XmlElementReader.cs" Line="72">In method 'XmlElementReader.GetElement(string, string, string)', correct the spelling of 'subname' in parameter name 'subname' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetElement(System.Xml.XmlReader,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Codice\VisualStudio2012\AxsUtils\Xml" File="XmlElementReader.cs" Line="145">Modify 'XmlElementReader.GetElement(XmlReader, string, string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="subname" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils\Xml" File="XmlElementReader.cs" Line="90">In method 'XmlElementReader.GetElement(XmlReader, string, string)', correct the spelling of 'subname' in parameter name 'subname' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="xmlr" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils\Xml" File="XmlElementReader.cs" Line="90">In method 'XmlElementReader.GetElement(XmlReader, string, string)', correct the spelling of 'xmlr' in parameter name 'xmlr' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadElements(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Xml" File="XmlElementReader.cs" Line="55">In method 'XmlElementReader.ReadElements(string)', call System.IDisposable.Dispose on object 'xmlr' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Codice\VisualStudio2012\AxsUtils\Xml" File="XmlElementReader.cs" Line="58">Modify 'XmlElementReader.ReadElements(string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadElements(System.Xml.XmlTextReader)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Codice\VisualStudio2012\AxsUtils\Xml" File="XmlElementReader.cs" Line="36">Modify 'XmlElementReader.ReadElements(XmlTextReader)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="xmlr" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils\Xml" File="XmlElementReader.cs" Line="16">In method 'XmlElementReader.ReadElements(XmlTextReader)', correct the spelling of 'xmlr' in parameter name 'xmlr' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="XmlLeaf" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils\Xml" File="XmlLeaf.cs" Line="45">In method 'XmlLeaf.XmlLeaf(string)', correct the spelling of 'c' in parameter name 'cCategory' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddValue(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="valore" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Codice\VisualStudio2012\AxsUtils\Xml" File="XmlLeaf.cs" Line="59">In method 'XmlLeaf.AddValue(string, string)', correct the spelling of 'valore' in parameter name 'valore' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Xml" File="XmlLeaf.cs" Line="65">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'XmlLeaf.AddValue(string, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetCategory()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Xml" File="XmlLeaf.cs" Line="132">Change 'XmlLeaf.GetCategory()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetDoubleValue(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Double.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Xml" File="XmlLeaf.cs" Line="113">Because the behavior of 'double.Parse(string)' could vary based on the current user's locale settings, replace this call in 'XmlLeaf.GetDoubleValue(string)' with a call to 'double.Parse(string, IFormatProvider)'. If the result of 'double.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetIntValue(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="int" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="LanguageSpecificMember" Certainty="75" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Xml" File="XmlLeaf.cs" Line="100">Consider replacing the language-specific data type identifier 'Int' in member name 'XmlLeaf.GetIntValue(string)' with either a language-independent equivalent or a more generic term, such as 'value'.</Issue>
            </Message>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Xml" File="XmlLeaf.cs" Line="102">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'XmlLeaf.GetIntValue(string)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetNames()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Xml" File="XmlLeaf.cs" Line="122">Change 'XmlLeaf.GetNames()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetRandomValue()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Xml" File="XmlLeaf.cs" Line="75">Change 'XmlLeaf.GetRandomValue()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="XmlParser" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetLeaves()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Xml" File="XmlParser.cs" Line="73">Change 'XmlParser.GetLeaves()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Read()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Xml" File="XmlParser.cs" Line="106">In method 'XmlParser.Read()', object 'sr' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'sr' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadXML()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Codice\VisualStudio2012\AxsUtils\Xml" File="XmlParser.cs" Line="45">Method 'XmlParser.ReadXML()' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "Trying to parse: ".</Issue>
            </Message>
            <Message Id="XML" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2012-07-09 09:18:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Codice\VisualStudio2012\AxsUtils\Xml" File="XmlParser.cs" Line="44">Correct the casing of 'XML' in member name 'XmlParser.ReadXML()' by changing it to 'Xml'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="AvoidCallingProblematicMethods" Category="Microsoft.Reliability" CheckId="CA2001">
   <Name>Avoid calling problematic methods</Name>
   <Description>Avoid making unnecessary and potentially dangerous method calls.</Description>
   <Resolution Name="System.Runtime.InteropServices.SafeHandle.DangerousGetHandle">Remove the call to SafeHandle.DangerousGetHandle from {0}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb385973(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="reliabilityrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020">
   <Name>Avoid namespaces with few types</Name>
   <Description>A namespace should generally have more than five types.</Description>
   <Resolution Name="Default">Consider merging the types defined in '{0}' with another namespace.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182130(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021">
   <Name>Avoid out parameters</Name>
   <Description>Using out parameters might indicate a design flaw. Although there are legitimate times to use out parameters, their use frequently indicates a design that does not conform to the design guidelines for managed code.</Description>
   <Resolution Name="Default">Consider a design that does not require that {0} be an out parameter.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182131(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812">
   <Name>Avoid uninstantiated internal classes</Name>
   <Description>An internal class was detected that is apparently never instantiated. This rule does not attempt to detect late-bound creation and will generate false positives if instances of a type are only created in this way (for example, by means of Activator.CreateInstance or by passing the type as an argument to a TypeConverter constructor).</Description>
   <Resolution Name="Default">{0} is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182265(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702">
   <Name>Compound words should be cased correctly</Name>
   <Description>Avoid creating compound words from terms which exist in the dictionary as discrete terms. Do not create a compound word such as 'StopWatch' or 'PopUp'. These terms are recognized in the dictionary and should be cased as 'Stopwatch' and 'Popup'.</Description>
   <Resolution Name="MemberParameterShouldBeCompoundWord">In member {0}, the discrete term '{1}' in parameter name {2} should be expressed as a compound word, '{3}'.</Resolution>
   <Resolution Name="MemberShouldBeCompoundWord">The discrete term '{0}' in member name {1} should be expressed as a compound word, '{2}'.</Resolution>
   <Resolution Name="MemberShouldBeDiscreteTerm">The compound word '{0}' in member name {1} exists as a discrete term. If your usage is intended to be single word, case it as '{2}' or strip the first token entirely if it represents any sort of Hungarian notation.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264474(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="80">Error</MessageLevel>
   <File Name="namingrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011">
   <Name>Consider passing base types as parameters</Name>
   <Description>Using base types as parameters to methods improves re-use of these methods if you only use methods &amp; properties from the parameter's base class. E.g. use Stream instead of FileStream as a parameter when only calling Stream.Read(), this makes the method work on all kind of streams instead of just File streams.</Description>
   <Resolution Name="Default">Consider changing the type of parameter {0} in {1} from {2} to its base type {3}. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/3hk32yyz(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Error</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213">
   <Name>Disposable fields should be disposed</Name>
   <Description>If a type that implements IDisposable owns fields that also implement IDisposable, the encapsulating type's Dispose() implementation should call Dispose() on each disposable field.</Description>
   <Resolution Name="Default">{0} contains field {1} that is of IDisposable type: {2}. Change the Dispose method on {0} to call Dispose or Close on this field.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182328(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000">
   <Name>Dispose objects before losing scope</Name>
   <Description>If a disposable object is not explicitly disposed before all references to it are out of scope, the object will be disposed at some indeterminate time when the garbage collector runs the finalizer of the object. Because an exceptional event might occur that will prevent the finalizer of the object from running, the object should be explicitly disposed instead.</Description>
   <Resolution Name="ExceptionEdge">In method {0}, object {1} is not disposed along all exception paths. Call System.IDisposable.Dispose on object {1} before all references to it are out of scope.</Resolution>
   <Resolution Name="NonExceptionEdge">In method {0}, call System.IDisposable.Dispose on object {1} before all references to it are out of scope.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182289(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202">
   <Name>Do not dispose objects multiple times</Name>
   <Description>A correctly implemented Dispose method can be called multiple times without throwing an exception. However, this is not guaranteed and to avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Description>
   <Resolution Name="Default">Object {0} can be disposed more than once in method {1}. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 129</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182334(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303">
   <Name>Do not pass literals as localized parameters</Name>
   <Description>Literal strings that are embedded in source code are difficult to localize. Avoid passing literal strings as arguments in circumstances where a localized string is generally expected.</Description>
   <Resolution Name="KnownValue">Method {0} passes a literal string as parameter '{1}' of a call to {2}. Retrieve the following string(s) from a resource table instead: {3}.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182187(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031">
   <Name>Do not catch general exception types</Name>
   <Description>You should not catch Exception or SystemException. Catching generic exception types can hide run-time problems from the library user, and can complicate debugging. You should catch only those exceptions that you can handle gracefully.</Description>
   <Resolution Name="Default">Modify {0} to catch a more specific exception than {1} or rethrow the exception.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182137(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051">
   <Name>Do not declare visible instance fields</Name>
   <Description>Instance fields that are visible outside of the type that declares them, limit your ability to change the implementation details for those data items. Use properties instead. They do not compromise usability or performance and they do provide flexibility in that they conceal the implementation details of the underlying data.</Description>
   <Resolution Name="Default">Because field {0} is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182141(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002">
   <Name>Do not expose generic lists</Name>
   <Description>Do not expose List&lt;T&gt; in object models. Use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt; instead. List&lt;T&gt; is meant to be used from implementation, not in object model API. List&lt;T&gt; is optimized for performance at the cost of long term versioning. For example, if you return List&lt;T&gt; to the client code, you will not ever be able to receive notifications when client code modifies the collection.</Description>
   <Resolution Name="Default">Change {0} in {1} to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182142(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806">
   <Name>Do not ignore method results</Name>
   <Description>The result of methods that return new instances of strings should be assigned to a variable and subsequently used. If the result of a method that creates a new object, such as String.ToLower(), is not assigned to a variable, the call is wasted.</Description>
   <Resolution Name="HResultOrErrorCode">{0} calls {1} but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182273(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065">
   <Name>Do not raise exceptions in unexpected locations</Name>
   <Description>Do not explicitly raise exceptions from unexpected locations. There are some methods, such as Equals and GetHashCode, which users do not expect to raise exceptions. Therefore calls to these methods are not commonly wrapped in try catch blocks.</Description>
   <Resolution Name="PropertyGetter">{0} creates an exception of type {1}, an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb386039(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error, Warning</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709">
   <Name>Identifiers should be cased correctly</Name>
   <Description>Type, namespace, and member identifiers are Pascal-cased. Parameter identifiers are camel-cased. Two letter acronyms within these identifiers should be upper-cased, for example, use System.IO instead of System.Io. Acronyms of three or more letters should be Pascal-cased, for example, use System.Xml instead of System.XML. The pascal-casing convention capitalizes the first letter of each word, as in BackColor. The camel-casing convention formats the first letter of the first word in lowercase and capitalizes the first letter of all subsequent words, as in backgroundColor. Although it may be common practice for some two letter acronyms to not be fully capitalized, violations of this rule should not be excluded for this reason. For example, 'DbConnection', is common but incorrect; use DBConnection. A violation of this rule might be required for compatibility with existing, non-managed symbol schemes. In general, however, these symbols should not be visible outside the assembly that uses them.</Description>
   <Resolution Name="Member">Correct the casing of '{0}' in member name {1} by changing it to '{2}'.</Resolution>
   <Resolution Name="MemberParameter">In member {0}, correct the casing of '{1}' in parameter name {2} by changing it to '{3}'.</Resolution>
   <Resolution Name="Type">Correct the casing of '{0}' in type name {1} by changing it to '{2}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182240(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="85">Error</MessageLevel>
   <File Name="namingrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704">
   <Name>Identifiers should be spelled correctly</Name>
   <Description>The individual words that make up an identifier should not be abbreviated and should be spelled correctly. If this rule generates a false positive on a term that should be recognized, add the word to the FxCop custom dictionary.</Description>
   <Resolution Name="Assembly">Correct the spelling of '{0}' in assembly name {1}.</Resolution>
   <Resolution Name="Member">Correct the spelling of '{0}' in member name {1} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MemberParameter">In method {0}, correct the spelling of '{1}' in parameter name {2} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MemberParameterMoreMeaningfulName">In method {0}, consider providing a more meaningful name than parameter name {1}.</Resolution>
   <Resolution Name="Namespace">Correct the spelling of '{0}' in namespace name '{1}'.</Resolution>
   <Resolution Name="Type">Correct the spelling of '{0}' in type name {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264492(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="namingrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720">
   <Name>Identifiers should not contain type names</Name>
   <Description>Avoid using language-specific types name in parameters and members and data type identifiers in parameters. Types names might not be intuitive for all developers. It is recommended that you select a generic name, such as 'value', instead. If this is not sufficient, be sure to use the type name as it is defined in the .NET Framework Library and avoid language-specific type names completely. Some examples of C#-specific type names are 'float' (use 'Single' if a generic name is not sufficient), and 'ulong' (use 'UInt64' if a generic name is not sufficient).</Description>
   <Resolution Name="LanguageIndependentMemberParameter">In member {0}, consider replacing the data type identifier '{1}' in parameter name {2} with a more generic term, such as 'value'.</Resolution>
   <Resolution Name="LanguageSpecificMember">Consider replacing the language-specific data type identifier '{0}' in member name {1} with either a language-independent equivalent or a more generic term, such as 'value'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb531486(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="namingrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707">
   <Name>Identifiers should not contain underscores</Name>
   <Description>Do not use underscores when specifying identifiers. Some generated Visual Studio identifiers for applications contain underscore characters. Underscore characters should generally be avoided in public identifiers.</Description>
   <Resolution Name="Member">Remove the underscores from member name {0}.</Resolution>
   <Resolution Name="Type">Remove the underscores from type name {0}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182245(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711">
   <Name>Identifiers should not have incorrect suffix</Name>
   <Description>Types that do not extend certain base types should not use reserved name suffixes. Types and members should not use 'Ex' or 'New' to distinguish them from an earlier version of the same API, instead, use a numeric suffix such as '2' or provide a more meaningful suffix. Concrete type implementations and members should not end 'Impl'. Members instead, should either consider using the suggested alternate 'Core' in replacement of 'Impl' or avoid any suffix at all.</Description>
   <Resolution Name="MemberNewerVersion">Either replace the suffix '{0}' in member name {1} with the suggested numeric alternate '2' or provide a more meaningful suffix that distinguishes it from the member it replaces.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182247(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="namingrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032">
   <Name>Implement standard exception constructors</Name>
   <Description>Multiple constructors are required to correctly implement a custom exception. Missing constructors can make your exception unusable in certain scenarios. For example, the serialization constructor is required for handling exceptions in XML Web services.</Description>
   <Resolution Name="MissingConstructor">Add the following constructor to {0}: {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182151(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204">
   <Name>Literals should be spelled correctly</Name>
   <Description>This rule parses the literal string into words, tokenizing compound words, and checks the spelling of each word/token.</Description>
   <Resolution Name="Default">Correct the spelling of the unrecognized token '{0}' in the literal '{1}'.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/bb264488(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237">
   <Name>Mark ISerializable types with SerializableAttribute</Name>
   <Description>The System.Runtime.Serialization.ISerializable interface allows the type to customize its serialization, while the Serializable attribute enables the runtime to recognize the type as being serializable.</Description>
   <Resolution Name="Default">Add [Serializable] to {0} as this type implements ISerializable.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182350(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822">
   <Name>Mark members as static</Name>
   <Description>Methods which do not access instance data or call instance methods can be marked as static (Shared in Visual Basic). After doing so, the compiler will emit non-virtual call sites to these members which will prevent a check at runtime for each call that ensures the current object pointer is non-null. This can result in a measurable performance gain for performance-sensitive code. In some cases, the failure to access the current object instance represents a correctness issue.</Description>
   <Resolution Name="Default">The 'this' parameter (or 'Me' in Visual Basic) of {0} is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms245046(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060">
   <Name>Move P/Invokes to NativeMethods class</Name>
   <Description>This type contains members with the DllImport attribute. Members with the DllImport attribute should be contained in classes named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Description>
   <Resolution Name="Default">Because it is a P/Invoke method, {0} should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182161(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034">
   <Name>Nested types should not be visible</Name>
   <Description>Do not use public, protected or protected internal (Protected Friend) nested types as a way of grouping types. Use namespaces for this purpose. There are very limited scenarios where nested types are the best design. Also, nested type member accessibility is not clearly understood by all audiences. Enumerators are exempt from this rule.</Description>
   <Resolution Name="Default">Do not nest type {0}. Alternatively, change its accessibility so that it is not externally visible.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182162(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901">
   <Name>P/Invoke declarations should be portable</Name>
   <Description>.</Description>
   <Resolution Name="Parameter">As it is declared in your code, parameter {0} of P/Invoke {1} will be {2} bytes wide on {3} platforms. This is not correct, as the actual native declaration of this API indicates it should be {4} bytes wide on {3} platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of {5}.</Resolution>
   <Resolution Name="Return">As it is declared in your code, the return type of P/Invoke {0} will be {1} bytes wide on {2} platforms. This is not correct, as the actual native declaration of this API indicates it should be {3} bytes wide on {2} platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of {4}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182284(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="portabilityrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="PInvokeEntryPointsShouldExist" Category="Microsoft.Interoperability" CheckId="CA1400">
   <Name>P/Invoke entry points should exist</Name>
   <Description>Methods decorated with the DllImport attribute should point to existing unmanaged entry points. There is no compile-time check to ensure that methods decorated with the DllImport attribute actually exist in the referenced unmanaged dll. In the event that an entry point does not exist or the specified argument list is not correct, a runtime exception will be generated.</Description>
   <Resolution Name="Default">Correct the declaration of {0} so that it correctly points to an existing entry point in {1}. The unmanaged entry point name currently linked to is {2}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182208(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">CriticalWarning</MessageLevel>
   <File Name="interoperabilityrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="PreferJaggedArraysOverMultidimensional" Category="Microsoft.Performance" CheckId="CA1814">
   <Name>Prefer jagged arrays over multidimensional</Name>
   <Description>Multidimensional arrays can have a negative impact on performance. Use a jagged array if possible.</Description>
   <Resolution Name="Body">{0} uses a multidimensional array of {1}. Replace it with a jagged array if possible.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182277(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="25">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="PropertiesShouldNotBeWriteOnly" Category="Microsoft.Design" CheckId="CA1044">
   <Name>Properties should not be write only</Name>
   <Description>Write-only properties usually indicate a flawed design.</Description>
   <Resolution Name="AddGetter">Because property {0} is write-only, either add a property getter with an accessibility that is greater than or equal to its setter or convert this property into a method.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182165(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304">
   <Name>Specify CultureInfo</Name>
   <Description>If an overload exists that takes a CultureInfo argument, it should always be called in favor of an overload that does not. The CultureInfo type contains culture-specific information required for performing numeric and string operations, such as casing, formatting, and string comparisons. In scenarios where conversion and parsing behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182189(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305">
   <Name>Specify IFormatProvider</Name>
   <Description>If an overload exists that takes an IFormatProvider argument, it should always be called in favor of an overload that does not. Some methods in the runtime convert a value to or from a string representation and take a string parameter that contains one or more characters, called format specifiers, which indicate how the value is to be converted. If the meaning of the format specifier varies by culture, a formatting object supplies the actual characters used in the string representation. In scenarios where sorting and comparison behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="IFormatProviderAlternate">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be based on input from the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify {4}.</Resolution>
   <Resolution Name="IFormatProviderAlternateString">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify {4}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182190(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101">
   <Name>Specify marshaling for P/Invoke string arguments</Name>
   <Description>When marshaling strings as ANSI (or as Auto on Win9x), some characters may be changed. If best-fit mapping is on, strings that appear different in Unicode will be marshaled to identical ANSI strings, which may lead to incorrect security decisions. Turning best-fit mapping off reduces this risk, as all characters without equivalents are mapped to '?'. Also, note that CharSet.Ansi is the default setting for all string marshaling; Unicode marshaling must be specified explicitly, either as a CharSet setting of DllImport or StructLayout, or as a MarshalAs attribute with a Unicode (or system-dependent) UnmanagedType.</Description>
   <Resolution Name="ParameterImplicitAnsi">To reduce security risk, marshal parameter {0} as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182319(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307">
   <Name>Specify StringComparison</Name>
   <Description>If an overload exists that takes a StringComparison argument, it should always be called in favor of an overload that does not.</Description>
   <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb386080(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053">
   <Name>Static holder types should not have constructors</Name>
   <Description>Instances of types that define only static members do not need to be created. Many compilers will automatically add a public default constructor if no constructor is specified. To prevent this, adding an empty private constructor may be required.</Description>
   <Resolution Name="CSharp2_0">Because type {0} contains only 'static' members, mark it as 'static' to prevent the compiler from adding a default public constructor.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182169(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="UriParametersShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1054">
   <Name>URI parameters should not be strings</Name>
   <Description>If a parameter name contains "uri" or "url" or "urn", and it's typed as string, the parameter type should be changed to System.Uri, unless there is an overload method where the same parameter is typed as System.Uri.</Description>
   <Resolution Name="Default">Change the type of parameter {0} of method {1} from string to System.Uri, or provide an overload of {1}, that allows {0} to be passed as a System.Uri object.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182174(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="60">Error</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726">
   <Name>Use preferred terms</Name>
   <Description>Use preferred terms over deprecated alternates.</Description>
   <Resolution Name="MemberNoAlternate">Replace the term '{0}' in member name {1} with an appropriate alternate or remove it entirely.</Resolution>
   <Resolution Name="TypeNoAlternate">Replace the term '{0}' in type name {1} with an appropriate alternate or remove it entirely.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182258(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024">
   <Name>Use properties where appropriate</Name>
   <Description>Properties should be used instead of Get/Set methods in most situations. Methods are preferable to properties in the following situations: the operation is a conversion, is expensive or has an observable side-effect; the order of execution is important; calling the member twice in succession creates different results; a member is static but returns a mutable value; or the member returns an array.</Description>
   <Resolution Name="Default">Change {0} to a property if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182181(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062">
   <Name>Validate arguments of public methods</Name>
   <Description>All reference arguments passed to externally visible methods should be checked against null (Nothing in VB). If appropriate, throw a System.ArgumentNullException when the argument is null.</Description>
   <Resolution Name="Default">In externally visible method {0}, validate parameter '{1}' before using it.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182182(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="11.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
