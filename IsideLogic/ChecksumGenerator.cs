using System;
using System.Security.Cryptography;
using System.Text;
using LLCryptoLib;
using LLCryptoLib.Hash;
using LLCryptoLib.Utils;

namespace IsideLogic
{
    public abstract class ChecksumGenerator
    {
        protected SupportedHashAlgo hashAlgo;
        protected AxsUtils.DirectoryElements files;
        protected string checksumName;
        protected char commentChar;

        /// <summary>
        /// Initializes a new instance of the <see cref="ChecksumGenerator"/> class.
        /// </summary>
        protected ChecksumGenerator()
        {
            this.checksumName = "Unknown";
            this.commentChar = '?';
        }

        /// <summary>
        /// Initializes the specified de.
        /// </summary>
        /// <param name="de">The de.</param>
        /// <param name="ha">The ha.</param>
        public void Initialize(AxsUtils.DirectoryElements de, SupportedHashAlgo ha)
        {
            this.files = de;
            this.hashAlgo = ha;
        }

        public abstract string ProduceSum(CallbackEntry cbe);
        public abstract bool VerifySum(string md5Path, CallbackEntry cbe);

        protected string Header
        {
            get
            {
                StringBuilder sb = new StringBuilder();

                // Header
                sb.Append(this.Comment(this.checksumName));
                sb.Append(" generated by ");
                sb.Append(IsideLogic.Config.AppNameAndVersion);
                sb.Append(" (");
                sb.Append(IsideLogic.Config.APPURL);
                sb.Append(")");
                sb.Append(Environment.NewLine);
                sb.Append(this.Comment("Operating System: " + AxsUtils.Win32.OS.OperatingSystem));
                sb.Append(Environment.NewLine);
                sb.Append(this.Comment("Operations started on " + DateTime.Now.ToShortDateString() + ", " + DateTime.Now.ToLongTimeString()));
                sb.Append(Environment.NewLine);
                sb.Append(this.Comment("Hash algorithm: " + this.hashAlgo.Name));
                sb.Append(Environment.NewLine);
                if (this.hashAlgo.IsKeyed)
                {
                    KeyedHashAlgorithm khash = (KeyedHashAlgorithm)this.hashAlgo.Algorithm;
                    sb.Append(this.Comment("Keyed hash key: " + Hexer.BytesToHex(khash.Key, HexEnum.UNIX)));
                }
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);

                return sb.ToString();
            }
        }

        protected string Comment(string stringToComment)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append(this.commentChar);
            sb.Append(' ');
            sb.Append(stringToComment);
            return sb.ToString();
        }

    }
}
